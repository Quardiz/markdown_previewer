{"version":3,"sources":["serviceWorker.js","components/editor/index.js","components/editor/editor.js","components/previewer/previewer.js","components/previewer/index.js","inputStore.js","index.js"],"names":["Boolean","window","location","hostname","match","editor","props","handleChange","bind","expand","event","this","store","input","target","value","console","log","editorExpanded","element","document","getElementById","titlebar","classList","remove","add","className","id","onClick","icon","faExpandArrowsAlt","onChange","placeholder","name","Component","Previewer","state","dangerouslySetInnerHTML","__html","marked","previewer","observer","InputStore","previewerExpanded","decorate","observable","inputStore","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+DCjBSC,E,kDCMX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAHC,E,yDAKNE,GACTC,KAAKL,MAAMM,MAAMC,MAAQH,EAAMI,OAAOC,Q,+BAGxCC,QAAQC,IAAI,kBACZN,KAAKL,MAAMM,MAAMM,gBAAkBP,KAAKL,MAAMM,MAAMM,eACpD,IAAIC,EAAUC,SAASC,eAAe,yBAClCC,EAAWF,SAASC,eAAe,YACpCV,KAAKL,MAAMM,MAAMM,gBAElBC,EAAQI,UAAUC,OAAO,+BACzBL,EAAQI,UAAUE,IAAI,mBACtBH,EAASC,UAAUC,OAAO,aAC1BF,EAASC,UAAUE,IAAI,+BAIvBN,EAAQI,UAAUC,OAAO,mBACzBL,EAAQI,UAAUE,IAAI,+BACtBH,EAASC,UAAUC,OAAO,6BAC1BF,EAASC,UAAUE,IAAI,gB,+BAKzB,IAAMN,EAAU,4BAAQO,UAAU,eAAeC,GAAG,gBAAgBC,QAASjB,KAAKF,QAAQ,kBAAC,IAAD,CAAiBkB,GAAG,qBAAqBE,KAAMC,OACzI,OAAO,yBAAKJ,UAAU,mBAAmBC,GAAG,wBAC1C,yBAAKA,GAAG,WAAWD,UAAU,aAC3B,uBAAGC,GAAG,aAAN,UACCR,GAEH,yBAAKQ,GAAG,wBAAwBD,UAAU,+BAC1C,8BAAUK,SAAUpB,KAAKJ,aAAcyB,YAAY,gCAAgCN,UAAU,oBAAoBO,KAAK,e,GAvC1FC,a,iCCC9Bf,EAAU,kBAAC,IAAD,CAAiBQ,GAAG,qBAAqBE,KAAMC,MAEzDK,E,kDACF,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IACD8B,MAAQ,GAFE,E,qDAMjB,OAAO,yBAAKV,UAAU,uBACtB,yBAAKC,GAAG,sBACN,uBAAGA,GAAG,wBAAN,aACCR,GAEH,yBAAKQ,GAAG,mCACR,yBAAKK,YAAY,gCAAgCK,wBAAyB,CAACC,OAAQC,IAAO5B,KAAKL,MAAMM,MAAMC,QAASa,UAAU,8BAA8BO,KAAK,e,GAb/IC,aCPTM,ED4BaC,YAASN,G,OE5B/BO,E,sCACF7B,MAAQ,yC,KACRK,gBAAiB,E,KACjByB,mBAAoB,GAExBC,YAASF,EAAY,CACjB7B,MAAOgC,IACP3B,eAAgB2B,IAChBF,kBAAmBE,MAGhB,IAAMC,EAAa,IAAIJ,ECH9BK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAQrC,MAAOkC,IACf,kBAAC,EAAD,CAAWlC,MAAOkC,KAIpB1B,SAASC,eAAe,SNmHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.f8940906.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import editor from \"./editor\"\nexport default editor;\n","import React, {Component} from 'react';\nimport './editor.scss'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons'\n \nexport default class editor extends Component {\n  \n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.expand = this.expand.bind(this);\n    }\n    handleChange(event) {\n        this.props.store.input = event.target.value;\n    }\n    expand(){\n      console.log(\"TESTETETSTSTST\");\n      this.props.store.editorExpanded = !this.props.store.editorExpanded;\n      let element = document.getElementById(\"scrollabletextbox-div\");\n      let titlebar = document.getElementById(\"titlebar\");\n      if(this.props.store.editorExpanded){\n        // add expandedWindow class\n        element.classList.remove(\"scrollabletextbox-div-class\");\n        element.classList.add(\"expanded-window\");\n        titlebar.classList.remove(\"titlebars\");\n        titlebar.classList.add(\"titlebars-expanded-window\");\n        \n      } else {\n        // remove expandedWindow class\n        element.classList.remove(\"expanded-window\");\n        element.classList.add(\"scrollabletextbox-div-class\");\n        titlebar.classList.remove(\"titlebars-expanded-window\");\n        titlebar.classList.add(\"titlebars\");\n        \n      }\n    }\n    render() {\n      const element = <button className=\"title-button\" id=\"expand-button\" onClick={this.expand}><FontAwesomeIcon id=\"expand-arrows-icon\" icon={faExpandArrowsAlt}/></button>\n      return <div className=\"component-editor\" id=\"component-editor-box\">\n        <div id=\"titlebar\" className=\"titlebars\">\n          <p id=\"edit-text\">Editor</p>\n          {element}\n        </div>\n        <div id=\"scrollabletextbox-div\" className=\"scrollabletextbox-div-class\">\n        <textarea onChange={this.handleChange} placeholder=\"Enter your markdown code here\" className=\"scrollabletextbox\" name=\"note\">\n          \n          </textarea>\n        </div>\n        \n      </div>;\n    }\n  }\n","import React, {Component} from 'react';\nimport './previewer.scss'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExpandArrowsAlt } from '@fortawesome/free-solid-svg-icons'\nimport { observer } from 'mobx-react'\nimport marked from 'marked'\nconst element = <FontAwesomeIcon id=\"expand-arrows-icon\" icon={faExpandArrowsAlt} />;\n\nclass Previewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    \n    render() {\n      return <div className=\"component-previewer\">\n      <div id=\"titlebar-previewer\">\n        <p id=\"previewer-title-text\">Previewer</p>\n        {element}\n      </div>\n      <div id=\"scrollabletextbox-div-previewer\">\n      <div placeholder=\"Enter your markdown code here\" dangerouslySetInnerHTML={{__html: marked(this.props.store.input)}} className=\"scrollabletextbox-previewer\" name=\"note\">\n        \n        </div>\n      </div>\n      \n    </div>;\n    }\n  }\n  const ObserverPreviewer = observer(Previewer);\n  export default ObserverPreviewer;","import previewer from \"./previewer\"\nexport default previewer;\n","import {decorate, observable} from 'mobx'\nclass InputStore {\n    input = 'Test\\n# Test\\n# Test\\n# Test\\n# Test\\n';\n    editorExpanded = false;\n    previewerExpanded = false;\n}\ndecorate(InputStore, {\n    input: observable,\n    editorExpanded: observable,\n    previewerExpanded: observable\n})\n\nexport const inputStore = new InputStore();\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Editor from './components/editor';\nimport Previewer from './components/previewer';\nimport { inputStore } from './inputStore'\n// const myEditor = <Editor/>;\n// const myPreviewer = <Previewer state={myEditor.state} />\nReactDOM.render(\n  <React.StrictMode>\n    <Editor store={inputStore}/>\n    <Previewer store={inputStore}/>\n    {/* {myEditor}\n    {myPreviewer} */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}